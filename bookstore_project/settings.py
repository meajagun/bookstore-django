"""
Django settings for bookstore_project project.

Generated by 'django-admin startproject' using Django 3.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get('DEBUG', default=0))

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # added
    'django.contrib.sites', # django-allauth app

    # new apps
    # third-party apps
    'crispy_forms', # crispy forms app
    'allauth', # django-allauth app
    'allauth.account', # # add django-allauth to CustomUser accounts app
    #'allauth.socialaccount',

    # local apps
    'users.apps.UsersConfig', # user accounts app
    'pages.apps.PagesConfig', # static pages app


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bookstore_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # project base templated
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookstore_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# sqlite db settings
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#    }
#}

# postgresql db settings
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'db',
        'PORT': 5432
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),] # static files for local developement
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # static files for production developement
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
] # decides how to look for static files directories



AUTH_USER_MODEL = 'users.CustomUser' # to ensure project uses CustomerUser instead of default user model


CRISPY_TEMPLATES_PACK = 'bootstrap4' # crispy forms to format default django forms


# allauth - config
LOGIN_REDIRECT_URL = 'home'  # redirect to home page after log in
# LOGOUT_REDIRECT_URL = 'home'  # redirect to home page after log out
ACCOUNT_LOGOUT_REDIRECT = 'home'  # allauth overrides logout

SITE_ID = 1 # added allauth to project website

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend', # used to authenticate a user
    'allauth.account.auth_backends.AuthenticationBackend',  # used to authenticate users via backend
)


EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # send emails

ACCOUNT_SESSION_REMEMBER = True  # set remember user after login

ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True # enable/disable enter signup password twice

ACCOUNT_USERNAME_REQUIRED = False  # option to decide wether to login with username or email
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # ensures email is used to login and not userame
ACCOUNT_EMAIL_REQUIRED = True  # option wheter email is required during registration
ACCOUNT_UNIQUE_EMAIL = True  # makesure email added is unique per user

DEFAULT_FROM_EMAIL = 'admin@djangobookstore.com'